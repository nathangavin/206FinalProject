package voxSpell.data;

import java.util.ArrayList;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

public class Topic {

	private String _name = "";
	private ArrayList<WordList> _wordLists = new ArrayList<WordList>();
	private String _currentLevel;
	private WordList _mistakes = new WordList("mistakes");

	public Topic() {
		
	}
	
	public void readFromFile(String fileName) {
		File file = new File(fileName);
		if (file.isFile()) {
			Scanner scanFile = null;
			try {
				scanFile = new Scanner(file);
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
			
			WordList var = new WordList(scanFile.nextLine().substring(1));
			
			while (scanFile.hasNextLine()) {
				String line = scanFile.nextLine();
				if (line.startsWith("%")) {
					_wordLists.add(var);
					var = new WordList(line.substring(1));
				} else {
					var.add(new Word(line));
				}
			}
					
		}
	}
	
	/*
	private void readFromFile(String fileName) {
		File file = new File(fileName);
		if (file.isFile()) {
			Scanner scanFile = null;
			try {
				scanFile = new Scanner(file);
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}

			if (scanFile.hasNextLine()) {

				_currentLevel = scanFile.nextLine();

				WordList var = new WordList(scanFile.nextLine().substring(1));

				while (scanFile.hasNextLine()) {
					String line = scanFile.nextLine();
					if (line.equals("%mistakes")) {
						while (scanFile.hasNextLine()) {
							line = scanFile.nextLine();
							if (line.startsWith("%")) {
								var = new WordList(scanFile.nextLine().substring(1));	
							} else {
								addWordFromString(_mistakes, line);
							}
						}
					} else if (line.startsWith("%")) {
						if (!var.getName().equals("mistakes")) {
							_wordLists.add(var);
						}
						var = new WordList(line.substring(1));
					} else {
						addWordFromString(var, line);
					}
				}
			}
		} else {
			try {
				file.createNewFile();
			} catch(IOException e) {
				e.printStackTrace();
			}
		}

	}

	/** This method converts a line from a file into a format suitable
	 *  for creating a word object, then adds it to a wordlist.
	 */
	private void addWordFromString(WordList var, String line) {
		String[] wordInfo = line.split("\\s+");	
		if (wordInfo.length > 3) {
			String word = "";
			for (int i = 0; i < wordInfo.length - 2; i++) {
				word = word + " " + wordInfo[i];
			}
			String[] twoWords = {word, wordInfo[wordInfo.length - 2], wordInfo[wordInfo.length - 1]};
			wordInfo = twoWords;
		}


		var.add(new Word(wordInfo[0], 
				Integer.parseInt(wordInfo[1]), 
				Integer.parseInt(wordInfo[2])));
	}

	/** This method checks whether there is already a WordList object
	 *  in the _wordlists field with a name matching the String parameter. 
	 */
	private boolean doesListExist(String listName) {
		for (WordList var : _wordLists) {
			if (var.getName().equals(listName)) {
				return true;
			}
		}
		return false;
	}

	/** This method gets a WordList object matching the name of the 
	 *  String parameter.
	 *  returns null if no list is stored.
	 */
	public WordList getList(String listName) {
		for (WordList var : _wordLists) {
			if (var.getName().equals(listName)) {
				return var;
			}
		}
		return null;
	}

	/** This method returns an array of Strings representing the level names 
	 */
	public String[] getNamesOfLists() {
		String[] names = new String[_wordLists.size()];
		int i = 0;
		for (WordList var : _wordLists) {
			names[i] = var.getName();
			i++;
		}
		return names;
	}

	/** This method gets the Wordlist representing the words failed
	 */
	public WordList getMistakes() {
		return _mistakes;
	}
	
	/** This method overwrites the data stored in the file .Data.txt by deleting
	 *  the file and creating a new one. 
	 */
	/*
	public void overrideData() {
		File data = new File(".Data.txt");
		data.delete();
		try {
			data.createNewFile();
		} catch (IOException e) {
			e.printStackTrace();
		}
		readFromFile();
	}

	*/
	/** This method writes the data stored in this object to the file .Data.txt
	 */
	/*
	public void writeDataToFile() {
		overrideData();

		String fileName = ".Data.txt";

		if (_currentLevel == null) {
			_currentLevel = "Level 1";
		}

		addToFile(_currentLevel, fileName);

		addToFile("%" + _mistakes.getName(), fileName);
		for (Word var : _mistakes.returnCopyOfList()) {
			addToFile(var.toString(), fileName);
		}

		for (WordList var : _wordLists) {
			addToFile("%" + var.getName(), fileName);
			for (Word var1 : var.returnCopyOfList()) {
				addToFile(var1.toString(), fileName);
			}
		}

	}

	/**This method adds a string on a new line to a file
	 */
	private void addToFile(String word, String fileName) {
		String newLine = System.getProperty("line.separator");
		String line = word + newLine;

		try {
			BufferedWriter file = new BufferedWriter(new FileWriter(fileName, true));
			file.write(line);
			file.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	/** This method sets the value of _currentLevel 
	 */
	public void setCurrentLevel(String level) {
		_currentLevel = level;
	}

	/** This method returns the WordList of _currentLevel 
	 */
	public String getCurrentLevelName() {
		return _currentLevel;
	}


	/** This method returns the name of the level above 
	 *  current level.
	 */
	public String getNextLevelName() {
		String[] names = getNamesOfLists();
		for (int i = 0; i < names.length; i++) {
			if (names[i].equals(_currentLevel)) {
				return names[i+1];
			}
		}
		return names[0];
	}



}

